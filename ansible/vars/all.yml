---
server:
    install: '1'
    packages: [vim, git, imagemagick, screen, tmux, rsync, gcc, tar, make]
#    packages: [vim, git, imagemagick, screen, tmux, rsync, gcc, tar, make]
    timezone: Asia/Tokyo
    locale: ja_JP.UTF-8
vagrant_local:
    install: '1'
    vm: { base_box: trusty64, hostname: myApp.vb, ip: 192.168.33.99, memory: '2048', sharedfolder: ./, useVagrantCloud: '1', syncType: nfs }
nginx:
    install: '1'
    docroot: /var/www
    servername: myApp.vb
    servernameAdmin: myAdmin.vb
# this value is override other vars_files
nginx_do_not_cache: 0
mysql:
    install: '1'
    root_password: crea0201
    database: db
    user: mysql_user
    password: crea0201
    dump: ''
redis:
    install: '1'
    port: '6379'
php:
    install: '1'
    ppa: php5-5.6
# already include php5-mbstring ubuntu trusty64
#    packages: [php5-cli, php-pear, php5-curl, php5-imagick, php5-common, php5-fpm, php5-gd, php5-mbstring, php5-mcrypt, php5-memcache, php5-memcached, php5-mysql, php5-xdebug]
    packages: [php5-cli, php-pear, php5-curl, php5-imagick, php5-common, php5-fpm, php5-gd, php5-mcrypt, php5-memcache, php5-memcached, php5-mysql, php5-xdebug]
    peclpackages: [APC, memcache, memcached, ZendOpcache, mysql, PDO_MYSQL, redis, libevent, imagick]
xdebug:
    install: '1'
composer:
    install: '1'
blackfire:
    install: '1'
    server_id:
    server_token:
github:
    oauth_token: 63e6e5f34aa7208cedcb1254b5366d9ea083480d

work_dir: /etc/nginx/cer
openssl_dir: "{{ work_dir }}/meesiSSL"
openssl_cnf: "{{ work_dir }}/meesiSSL/openssl.cnf"
ca:
  default_md: sha256
  digest: sha256
  days: 3650
  subject: "/C=JP/ST=Tokyo/O=organization/CN=ECC Test CA"
  key: ca-private.key
  certificate: ca.pem
req:
  digest: sha256
  key: private.key
  csr: req.pem
usr:
  digest: sha256
  extendedKeyUsage:
    - serverAuth
    - clientAuth
  certificate: server.pem

vagrant_home: "/home/vagrant"
rvm:
  version: 2.2.3

rvm1_temp_download_path: '/tmp'
rvm1_default_ruby_version: '{{ rvm1_rubies | last if rvm1_rubies and rvm1_rubies is iterable else "" }}'
rvm1_rvm: '{{ rvm1_install_path }}/bin/rvm'
rvm1_symlink_binaries:
  - 'bundle'
  - 'bundler'
  - 'erb'
  - 'executable-hooks-uninstaller'
  - 'gem'
  - 'irb'
  - 'rake'
  - 'rdoc'
  - 'ri'
  - 'ruby'
  - 'testrb'

rvm1_symlink_to: '/usr/local/bin'

# Install 1 or more versions of ruby
# The last ruby listed will be set as the default ruby
rvm1_rubies:
  - 'ruby-2.2.2'

# Delete a specific version of ruby (ie. ruby-2.1.0)
rvm1_delete_ruby:

# Install path for rvm (defaults to system wide)
rvm1_install_path: '/usr/local/rvm'

# Add or remove any install flags
# NOTE: If you are doing a USER BASED INSTALL then
#       make sure you ADD the --user-install flag below
rvm1_install_flags: '--auto-dotfiles'

# Add additional ruby install flags
rvm1_ruby_install_flags:

# Set the owner for the rvm directory
rvm1_user: 'root'

# URL for the latest installer script
rvm1_rvm_latest_installer: 'https://raw.githubusercontent.com/wayneeseguin/rvm/master/binscripts/rvm-installer'

# rvm version to use
rvm1_rvm_version: 'stable'

# Check and update rvm, disabling this will force rvm to never update
rvm1_rvm_check_for_updates: True

# GPG key verification, use an empty string if you want to skip this
# Note: Unless you know what you're doing, just keep it as is
#           Identity proof: https://keybase.io/mpapis
#           PGP message: https://rvm.io/mpapis.asc
rvm1_gpg_keys: 'D39DC0E3'

# The GPG key server
rvm1_gpg_key_server: 'hkp://keys.gnupg.net'

# autolib mode, see https://rvm.io/rvm/autolibs
rvm1_autolib_mode: 3
